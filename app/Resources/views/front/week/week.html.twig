{% extends "base.html.twig" %}

{% block title %} {{ title|title }} {% endblock %}

{% block content %}

    {% include 'front/loading.html.twig' %}

{% endblock %}

{% block javascripts %}

    <script type="text/jsx" src="{{ asset('front/jsx/comic.jsx') }}"></script>

    <script type="text/jsx">
        var ReleasePagination = React.createClass({
            releaseDateComics: function(e) {
                this.props.func(e.target.value);
            },
            render: function() {
              return (
                  <div className="row">
                    <nav className="text-center col-xs-12">
                      <ul className="pagination">
                        <li>
                          <button className="btn btn-default" onClick={this.releaseDateComics} value={this.props.dates.previousMonth}>-{{ 'pagination.month'|trans|lower }}</button>
                        </li>
                        <li>
                          <button className="btn btn-default" onClick={this.releaseDateComics} value={this.props.dates.previousWeek}>-{{ 'pagination.week'|trans|lower }}</button>
                        </li>
                        <li>
                          <button className="btn btn-default" onClick={this.releaseDateComics} value={this.props.dates.nextWeek}>+{{ 'pagination.week'|trans|lower }}</button>
                        </li>
                        <li>
                          <button className="btn btn-default" onClick={this.releaseDateComics} value={this.props.dates.nextMonth}>+{{ 'pagination.month'|trans|lower }}</button>
                        </li>
                      </ul>
                    </nav>
                  </div>
              );
            }
        });

        var ComicBox = React.createClass({
          loadComicsFromServer: function(date) {
            $.ajax({
              url: Routing.generate('get_week_comics', { date: date }),
              dataType: 'json',
              success: function(data) {
                this.setState({data: data});
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(Routing.generate('get_week_comics', { date: date }), status, err.toString());
              }.bind(this)
            });
          },
          getInitialState: function() {
            return {data: []};
          },
          componentDidMount: function() {
            this.loadComicsFromServer(this.props.date);
            setInterval(this.loadComicsFromServer, this.props.pollInterval);
          },
          render: function() {
            return (
                <div>
                    <h1 className="text-center">{{ 'comics.release'|trans|capitalize }} {{ date.formatLocalized('%b %e, %Y')|title }}</h1>
                    <ComicList data={this.state.data} />
                    <ReleasePagination dates={ {
                        'nextWeek': new Date({{ date|nextWeek('year')}}, {{ date|nextWeek('month')}}, {{ date|nextWeek('day')}}),
                        'previousWeek': new Date({{ date|previousWeek('year')}}, {{ date|previousWeek('month')}}, {{ date|previousWeek('day')}}),
                        'nextMonth': new Date({{ date|nextMonth('year')}}, {{ date|nextMonth('month')}}, {{ date|nextMonth('day')}}),
                        'previousMonth': new Date({{ date|previousMonth('year')}}, {{ date|previousMonth('month')}}, {{ date|previousMonth('day')}})
                    } } func={this.loadComicsFromServer}
                    />
                </div>
            );
          }
        });

        function display(date){
            React.render(
              <ComicBox date={date} pollInterval={8640000} />,
              document.getElementById('content')
            );
        };

        display('{{ date.format('d-m-Y') }}');

    </script>

{% endblock %}
