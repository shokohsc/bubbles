{% extends "base.html.twig" %}

{% block title %} {{ title|title }} {% endblock %}

{% block content %}

  <h1 class="text-center">{{ 'comics.release'|trans|capitalize }} {{ date.formatLocalized('%b %e, %Y')|title }}</h1>

  <div id="comic-list" class="text-center">

      {% include 'front/loading.html.twig' %}

  </div>

{% endblock %}

{% block pagination %}

  <div class="row">
    <nav class="text-center">
      <ul class="pagination">
        <li>
          <a class="released" data-href="{{ path('released', {
          'day':   date|previousMonth('day'),
          'month': date|previousMonth('month'),
          'year':  date|previousMonth('year') }) }}">-{{ 'pagination.month'|trans|lower }}</a>
        </li>
        <li>
          <a class="released" data-href="{{ path('released', {
          'day':   date|previousWeek('day'),
          'month': date|previousWeek('month'),
          'year':  date|previousWeek('year') }) }}">-{{ 'pagination.week'|trans|lower }}</a>
        </li>
        <li>
          <a class="released" data-href="{{ path('released', {
          'day':   date|nextWeek('day'),
          'month': date|nextWeek('month'),
          'year':  date|nextWeek('year') }) }}">+{{ 'pagination.week'|trans|lower }}</a>
        </li>
        <li>
          <a class="released" data-href="{{ path('released', {
          'day':   date|nextMonth('day'),
          'month': date|nextMonth('month'),
          'year':  date|nextMonth('year') }) }}">+{{ 'pagination.month'|trans|lower }}</a>
        </li>
      </ul>
    </nav>
  </div>

{% endblock %}

{% block javascripts %}

    <script type="text/jsx">
        var Comic = React.createClass({
          render: function() {
            return (
                <div className="comic-item-list">
                    <a href={Routing.generate('comic', { id: this.props.comic.id.comicId })} title={this.props.comic.title}>
                        <img
                          id={this.props.comic.id.comicId}
                          className="img-thumbnail"
                          src={this.props.comic.thumbnail.path + '/portrait_incredible.' + this.props.comic.thumbnail.extension}
                          alt={this.props.comic.title}
                          height="324"
                          width="216"
                        />
                    </a>
                    <strong>
                      <a href={Routing.generate('comic', { id: this.props.comic.id.comicId })} title={this.props.comic.title}>{this.props.comic.title}</a>
                    </strong>
                </div>
            );
          }
        });
        var ComicList = React.createClass({
          render: function() {
            var comicNodes = this.props.data.map(function(comic, index) {
              return (
                <Comic comic={comic} key={index}>
                <div>
                    {comic}
                </div>
                </Comic>
              );
            });
            return (
              <div id="comic-list" className="text-center">
                {comicNodes}
              </div>
            );
          }
        });
        var ComicBox = React.createClass({
          loadComicsFromServer: function() {
            $.ajax({
              url: this.props.url,
              dataType: 'json',
              success: function(data) {
                this.setState({data: data});
              }.bind(this),
              error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
              }.bind(this)
            });
          },
          getInitialState: function() {
            return {data: []};
          },
          componentDidMount: function() {
            this.loadComicsFromServer();
            setInterval(this.loadComicsFromServer, this.props.pollInterval);
          },
          render: function() {
            return (
                <div>
                    <h1 className="text-center">{{ 'comics.release'|trans|capitalize }} {{ date.formatLocalized('%b %e, %Y')|title }}</h1>
                    <ComicList data={this.state.data} />
                </div>
            );
          }
        });
        React.render(
          <ComicBox url={Routing.generate('get_week_comics', { date: '{{ date.format('d-m-Y') }}' })} pollInterval={8640000} />,
          document.getElementById('content')
        );
    </script>

{% endblock %}
